import os
import re
import pandas as pd
import streamlit as st
from collections import defaultdict
from itertools import islice
from langchain_core.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI



st.set_page_config(page_title="üéì Analyse Scolaire", layout="centered")
st.title("üéì Chatbot Scolaire - Analyse des Performances")

# ‚úÖ Chargement et cache des donn√©es
df=pd.read_csv("https://raw.githubusercontent.com/SomaDjakiss/Projet_ChatBot_Kix_Seeds/main/data_kix_seeds.csv",encoding="ISO-8859-1",sep=";")
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
# ‚úÖ Chargement de la cl√© API OpenAI depuis les secrets Streamlit
openai_api_key = st.secrets["OPENAI_API_KEY"]

# ‚úÖ Configuration du mod√®le GPT
llm = ChatOpenAI(
    model_name="gpt-4",
    temperature=0.7,
    openai_api_key=openai_api_key
)
# Prompt template
prompt_template = PromptTemplate(
    input_variables=["question", "donnees"],
    template="""
Tu es un expert en analyse p√©dagogique, con√ßu pour fournir des r√©ponses pr√©cises, structur√©es et bas√©es sur des donn√©es scolaires.
Voici des donn√©es sur les performances scolaires d'√©l√®ves. Utilise ces informations pour r√©aliser une analyse p√©dagogique approfondie selon le type de demande.

## ANALYSE AU NIVEAU √âL√àVE
Si la question concerne un √©l√®ve sp√©cifique (par nom, pr√©nom ou ID) :

### Profil de l'√©l√®ve
- Informations personnelles : nom_eleve, prenom_eleve, nom_complet_eleve, date_naissance_eleve, lieu_naissance_eleve, genre_eleve (1:masculin, 2:f√©minin)
- Statut: est_redoublant, statut_eleve (v√©rifie si PDI statut_eleve =2), eleve_a_handicap
- Contexte familial: vit_avec_parents, vit_au_domicile_parents, vit_avec_tuteur, profession_pere, profession_mere, niveau_education_pere, niveau_education_mere
### Performances acad√©miques
- Notes et moyennes : notes_matieres, moyenne_t1, moyenne_t2, moyenne_t3, moyenne_annuelle_t1, moyenne_annuelle_t2, moyenne_annuelle_t3
- Classement : rang_t1, rang_t2, rang_t3, rang_annuel_t1, rang_annuel_t2, rang_annuel_t3
- Progression : Analyse l'√©volution entre les trimestres (am√©lioration, d√©t√©rioration, stabilit√©)
- Comparaison avec la classe : Positionne l'√©l√®ve par rapport √† moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3
- Mati√®res : Identifie les forces (notes ‚â• 7/10) et faiblesses (notes < 5/10)
### Assiduit√© et comportement
- Pr√©sence : type_presence (pr√©sent, absent, retard), motif_absence, date_debut_absence, date_fin_absence
- Conduite : appreciation_conduite_t1, appreciation_conduite_t2, conduite_label_t3, sanction_disciplinaire_t1, sanction_disciplinaire_t2, sanction_t3
- Appr√©ciations : appreciation_enseignant_t1, appreciation_enseignant_t2, appreciation_t3
###Contexte de vie et bien-√™tre
- Logistique scolaire : distance_domicile, mode_transport, residence_eleve
- √âquipement √©ducatif : possede_bureau, possede_livres, possede_tableaux, possede_tablette, possede_autres_materiels
- Contexte familial : menage_a_television, menage_a_radio, menage_a_internet, menage_a_electricite
- Bien-√™tre et s√©curit√© : dort_sous_moustiquaire, victime_violence, victime_violence_physique, victime_stigmatisation, victime_violence_sexuelle, victime_violence_emotionnelle, victime_autre_violence
### Recommandations personnalis√©es
- Soutien acad√©mique : Propose des strat√©gies d'am√©lioration pour les mati√®res faibles
- Soutien socio-√©ducatif : Conseils adapt√©s aux conditions de vie et au contexte familial
- Suivi sp√©cifique : Si √©l√®ve vuln√©rable (PDI, handicap, victime de violence), propose un accompagnement adapt√©

## ANALYSE AU NIVEAU CLASSE
Si la question concerne une classe sp√©cifique :
### Profil de la classe
- Informations g√©n√©rales : nom_salle_classe, effectif_classe_t1, effectif_classe_t2, effectif_t3
- Composition : R√©partition par genre_eleve (1:masculin, 2:f√©minin)
- Statuts particuliers : Nombre d'√©l√®ves est_redoublant, PDI (statut_eleve=2), eleve_a_handicap
### Performances globales
- Moyennes de la classe : moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3
- Dispersion : √âcart entre moyenne_la_plus_elevee_t1/t2 et moyenne_la_plus_basse_t1/t2, max_moyenne_t3 et min_moyenne_t3
- Taux de r√©ussite : Pourcentage d'√©l√®ves avec moyenne (moyenne_t1, moyenne_t2, moyenne_t3) ‚â• 5/10, analyse par genre genre_eleve
- Progression : √âvolution des r√©sultats entre les trimestres
- Analyse par mati√®re : Mati√®res avec meilleurs et moins bons r√©sultats
### Assiduit√© et comportement
- Pr√©sence : Statistiques sur type_presence (pr√©sences, absences, retards)
- Motifs d'absence : Analyse des motif_absence les plus fr√©quents
- Abandons : Analyse des date_abandon si existantes
### Analyse comparative
- Par genre : Compare les performances moyennes_t1/t2/t3 selon le genre_eleve
- Par statut : Compare les performances des √©l√®ves ordinaires vs PDI vs avec handicap
- Par contexte familial : Analyse l'impact des conditions familiales sur les r√©sultats
### Recommandations p√©dagogiques
- Renforcement : Strat√©gies pour consolider les acquis dans les mati√®res r√©ussies
- Rem√©diation : Approches pour am√©liorer les r√©sultats dans les mati√®res faibles
- Accompagnement : Mesures pour soutenir les √©l√®ves en difficult√©
- Dynamique de classe : Suggestions pour am√©liorer la coh√©sion et l'environnement d'apprentissage

## ANALYSE AU NIVEAU √âCOLE
Si la question concerne une √©cole sp√©cifique :
### Profil de l'√©tablissement
- Informations g√©n√©rales : nom_ecole, code_ecole, type_ecole, statut_ecole, milieu_ecole (urbain/rural)
- Localisation : region_ecole, province_ecole, commune_ecole, ceb_ecole, secteur_village_ecole
- Administration : nom_complet_directeur, sexe_directeur, poste_directeur, responsabilites_directeur
- Structure : Nombre total d'√©l√®ves, nombre total d'enseignants, r√©partition par genre
### Infrastructure et √©quipement
- B√¢timents : Nombre de salles de classe, √©tat des infrastructures
- √âquipements essentiels : Pr√©sence de cantine, latrines/toilettes/WC, fontaine/pompe/eau potable, √©lectricit√©
- Ressources p√©dagogiques : Disponibilit√© de mat√©riels didactiques
### Performances par classe
- Moyennes : moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3 pour chaque nom_salle_classe
- Taux de r√©ussite : Pourcentage d'√©l√®ves avec moyenne ‚â• 5/10 par nom_salle_classe et par genre_eleve  genre 
- Progression : √âvolution des r√©sultats entre les trimestres par classe
- Analyse comparative : Classement des classes selon leurs performances
### Statistiques socio-√©ducatives
- Pr√©sence*: Statistiques globales sur type_presence (pr√©sences, absences, retards)
- Statuts particuliers : Proportion de PDI (statut_eleve=2), √©l√®ves avec handicap
- Bien-√™tre : Cas signal√©s de violence (victime_violence, types de violences)
### Recommandations institutionnelles
- Gestion : Suggestions pour l'am√©lioration de la gouvernance scolaire
- P√©dagogie : Strat√©gies pour renforcer la qualit√© de l'enseignement
- √âquit√© : Mesures pour r√©duire les disparit√©s de performance
- Bien-√™tre : Actions pour am√©liorer l'environnement scolaire et la s√©curit√©

## ANALYSE AU NIVEAU CEB OU COMMUNE
Si la question concerne une CEB ou une commune :
### Cartographie √©ducative
- Structure : Nombre d'√©coles dans la CEB/commune, r√©partition par type_ecole et statut_ecole
- Personnel : Nombre total d'enseignants, r√©partition par sexe_directeur et genre des enseignants
- Population scolaire : Nombre total d'√©l√®ves, r√©partition par genre_eleve
- Ratios : √âl√®ves/enseignant par √©cole, √©l√®ves/classe
### Infrastructure territoriale
- √âquipements essentiels : Proportion d'√©coles avec/sans cantine, latrines, eau potable, √©lectricit√©
- Accessibilit√© : Analyse des distance_domicile et mode_transport dominants
- Ressources : Disponibilit√© et distribution des mat√©riels didactiques
### Performances comparatives
- Moyennes : Classement des √©coles selon moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3
- Taux de r√©ussite : Comparaison du pourcentage d'√©l√®ves avec moyenne ‚â• 5/10 par √©cole
- Disparit√©s : Identification des √©carts de performance significatifs
- Facteurs explicatifs : Analyse des corr√©lations entre performances et facteurs contextuels
### Vuln√©rabilit√©s et inclusion
- Populations sp√©cifiques : Nombre de PDI (statut_eleve=2), √©l√®ves avec handicap par √©cole
- Violences et protection : Cartographie des signalements de victime_violence et types
- Abandons : Analyse comparative des taux d'abandon par √©cole
### Recommandations territoriales
- Planification : Strat√©gies pour une meilleure r√©partition des ressources
- Formation : Besoins en renforcement des capacit√©s des enseignants
- Infrastructures : Priorit√©s d'investissement dans les √©quipements essentiels
- Protection : Mesures coordonn√©es pour am√©liorer la s√©curit√© des √©l√®ves

## DIRECTIVES G√âN√âRALES
### Format de r√©ponse
- Structure claire : Utilise des titres, sous-titres et listes pour organiser l'information
- Visualisation : Propose des tableaux synth√©tiques pour les donn√©es comparatives
- Progressivit√© : Commence par les constats, puis analyse, puis recommandations
- Concision : Privil√©gie la pertinence √† l'exhaustivit√©
### M√©thodologie d'analyse
- Objectivit√© : Base toutes les affirmations sur les donn√©es disponibles
- Prudence : Signale clairement les donn√©es manquantes ou incompl√®tes
- Contextualisation : Tiens compte des sp√©cificit√©s locales (milieu_ecole, etc.)
- √âquit√© : Analyse syst√©matiquement les disparit√©s de genre et les vuln√©rabilit√©s
### Recommandations
- Pragmatisme : Propose des solutions r√©alistes et adapt√©es au contexte
- Progressivit√© : Distingue les actions √† court, moyen et long terme
- Responsabilisation : Identifie les acteurs concern√©s par chaque recommandation
- Inclusivit√© : Veille √† l'adaptation des recommandations aux besoins sp√©cifiques

**Ne jamais inventer de donn√©es**. Si les donn√©es sont manquantes, indique-le clairement.


Question : {question}

Donn√©es :
{donnees}

Fais une r√©ponse claire et structur√©e.
"""
)

def extraire_filtre(question, valeurs_connues):
    for val in valeurs_connues:
        if val and str(val).lower() in question.lower():
            return val
    return None

def get_response_from_dataframe(question, df):
    from functools import reduce
    import operator
    reponses = []

    question_lower = question.lower()

    # Recherche des filtres possibles
    id_eleve = extraire_filtre(question_lower, df['id_eleve'].astype(str).unique())
    identifiant_unique = extraire_filtre(question_lower, df['identifiant_unique_eleve'].astype(str).unique())
    id_classe = extraire_filtre(question_lower, df['id_classe'].astype(str).unique())
    code_classe = extraire_filtre(question_lower, df['code_classe'].astype(str).unique())
    nom_classe = extraire_filtre(question_lower, df['nom_classe'].astype(str).unique())
    nom_ecole = extraire_filtre(question_lower, df['nom_ecole'].astype(str).unique())
    code_ecole = extraire_filtre(question_lower, df['code_ecole'].astype(str).unique())
    ceb = extraire_filtre(question_lower, df['ceb_ecole'].astype(str).unique())
    commune = extraire_filtre(question_lower, df['commune_ecole'].astype(str).unique())
    
    # üîç √âl√®ve
    if id_eleve or identifiant_unique:
        ident = id_eleve or identifiant_unique
        ligne = df[(df['id_eleve'].astype(str) == ident) | (df['identifiant_unique_eleve'].astype(str) == ident)]
        if not ligne.empty:
            ligne = ligne.iloc[0]
            donnees_texte = "\n".join([f"{col} : {ligne[col]}" for col in df.columns if col in ligne])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

    # üîç Classe / √©cole
    filtres = []
    if nom_ecole: filtres.append(df['nom_ecole'].str.lower() == nom_ecole.lower())
    if code_ecole: filtres.append(df['code_ecole'].astype(str) == str(code_ecole))
    if ceb: filtres.append(df['ceb_ecole'].astype(str) == str(ceb))
    if commune: filtres.append(df['commune_ecole'].astype(str) == str(commune))
    if code_classe: filtres.append(df['code_classe'].astype(str) == str(code_classe))
    if nom_classe: filtres.append(df['nom_classe'].str.lower() == nom_classe.lower())
    if id_classe: filtres.append(df['id_classe'].astype(str) == str(id_classe))
    

    if filtres:
        condition = reduce(operator.and_, filtres)
        df_filtre = df[condition]
        if df_filtre.empty:
            return "Aucune donn√©e trouv√©e avec les crit√®res sp√©cifi√©s."

        # Fixer automatiquement le nombre d‚Äô√©l√®ves dans la classe /On √©vite d‚Äôafficher tous les √©l√®ves si ce n‚Äôest pas explicitement demand√©.
        nb_eleves = df_filtre.shape[0]

        # üéØ Analyse par classe
        if "classe" in question_lower or "classes" in question_lower:
            classes = df_filtre['nom_classe'].unique()
            for classe in classes:
                df_classe = df_filtre[df_filtre['nom_classe'] == classe]
                resume = {col: df_classe[col].mean() for col in df_classe.columns if df_classe[col].dtype != 'object'}
                donnees_texte = f"Classe : {classe}\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
                prompt = prompt_template.format(question=question, donnees=donnees_texte)
                resultat = llm.invoke(prompt)
                if hasattr(resultat, 'content'):
                    resultat = resultat.content
                reponses.append(f"Classe {classe} :\n{resultat}")
            return "\n\n---\n\n".join(reponses)

        # üéØ Analyse globale de l‚Äô√©cole
        elif "√©cole" in question_lower or "ecole" in question_lower or "√©tablissement" in question_lower:
            resume = {col: df_filtre[col].mean() for col in df_filtre.columns if df_filtre[col].dtype != 'object'}
            donnees_texte = f"Ecole : {df_filtre['nom_ecole'].iloc[0]}\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

        # üéØ Si CEB ou commune
        elif "ceb" in question_lower or "commune" in question_lower:
            resume = df_filtre.groupby("nom_ecole").mean(numeric_only=True)
            donnees_texte = resume.round(2).to_string()
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

        # üîÑ Sinon (traitement classe sans mention explicite) : r√©sum√© sans nommer les √©l√®ves
        resume = {col: df_filtre[col].mean() for col in df_filtre.columns if df_filtre[col].dtype != 'object'}
        donnees_texte = "R√©sum√© global :\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
        prompt = prompt_template.format(question=question, donnees=donnees_texte)
        resultat = llm.invoke(prompt)
        return resultat.content if hasattr(resultat, 'content') else resultat

    return "Aucun filtre d√©tect√© dans la question. Veuillez sp√©cifier un √©l√®ve, une classe ou une √©cole."
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

#  Formulaire avec champ texte et bouton Submit
with st.form("formulaire_question"):
    user_input = st.text_input("Pose ta question sur un √©l√®ve, une √©cole ou une classe")
    submitted = st.form_submit_button("Submit")

#  Traitement apr√®s envoi
if submitted and user_input:
    response = get_response_from_dataframe(user_input, df)
    st.session_state.chat_history.extend([
        {"role": "user", "content": user_input},
        {"role": "assistant", "content": response}
    ])

# Affichage de l‚Äôhistorique
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
